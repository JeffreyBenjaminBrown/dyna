% Single source shortest path with optimal path extraction.
% This version is briefer but possibly less efficient.

% Cost of the optimal path from start to each node.  
% In each case, the associated key is a reversed version of the path itself.
path(start) min= 0                   with_key [start].
path(B)     min= path(A) + edge(A,B) with_key append($key(path(A)),B).

% The cost of the optimal path to the end node, and that path itself.
goal        = path(end).
optimalpath = $key(path(end)).

% expensive path
edge("a","b") := 1.
edge("b","c") := 1.
edge("c","d") := 1.

% cheap path
edge("a","e") := 1.
edge("e","d") := 1.

% define begining and end.
start := "a".
end := "d".


% ---------------------------------------
% list utilities

:- backchain append/2.
append([], Y) = [Y].
append([X|Xs], Y) = [X|append(Xs, Y)].
