% the following rule order is important bc we use :=.
:- backchain sym/1.
sym(A) := A.
sym([A|_]) := A.

% rule used to create top-level subtree
:- backchain rule/1.
rule([X,Y]) := &r(X, sym(Y)).
rule([X,Y,Z]) := &r(X, sym(Y), sym(Z)).

% count the number of words in a subtree
:- backchain numwords/1.
numwords(X) := 1.
numwords([X,Y]) := numwords(Y).
numwords([X,Y,Z]) := numwords(Y) + numwords(Z).

% extract word and it's position in tree
:- backchain word/2.
word(0, X) := X.
word(I, [X,Y]) := word(I, Y).
word(I, [X,Y,Z]) := I < numwords(Y), word(I, Y).
word(I, [X,Y,Z]) := I >= numwords(Y), word(I-numwords(Y), Z).

% unnormalized
c(X,Y) += 1
  for &r(X,Y) in f(T),
      T is b(tree(_)).

c(X,Y,Z) += 1
  for &r(X,Y,Z) in f(T),
      T is b(tree(_)).

% normalizing constants
n(X) += c(X,Y).
n(X) += c(X,Y,Z).

% normalize
p(X,Y) := c(X,Y) / n(X).
p(X,Y,Z) := c(X,Y,Z) / n(X).

% extract rules in a tree
:- backchain f/1.
f([X,Y]) bag= rule([X,Y]).
f([X,Y,Z]) bag= rule([X,Y,Z]).
f([X,Y]) bag= A for A in f(X).
f([X,Y]) bag= A for A in f(Y).
f([X,Y,Z]) bag= A for A in f(X).
f([X,Y,Z]) bag= A for A in f(Y).
f([X,Y,Z]) bag= A for A in f(Z).

%zzz(I) :=
%  T is b(tree(0)),
%  I in pycall("range", 0, numwords(T)),
%  word(I, T).

% binarize s-expression tree
:- backchain b/1.
b(X) := X.
b([X,Y]) := [X,b(Y)].
b([X,Y,Z|Xs]) := [X, b(Y), b([&'@'(X), Z|Xs])].
b([X,Y,Z]) := [X,b(Y),b(Z)].

% CKY parser
phrase(X,I,K) argmax= [phrase(Y,I,J) * phrase(Z,J,K) * p(X,Y,Z), [[Y,I,J], [Z,J,K]]].
phrase(X,I,K) argmax= [phrase(Y,I,K) * p(X,Y), [[Y,I,K]]].
phrase(X,I,I+1) argmax= [1, X] for [I,X] in enumerate(sentence).

% backpointers
bk(X,I,K) = $key(&phrase(X,I,K)).

% extract path from backpointers
path(X,I,K) := W is bk(X,I,K), W.
path(X,I,K) := [[Y,I,J], [Z,J,K]] is bk(X,I,K), [X, path(Y,I,J), path(Z,J,K)].
path(X,I,K) := [[Y,I,K]] is bk(X,I,K), [X, path(Y,I,K)].

% utility function.
:- backchain enumerate/2.
:- backchain enumerate/1.
enumerate(X) = enumerate(X, 0).
enumerate([], I) = [].
enumerate([X|Xs], I) = [[I,X] | enumerate(Xs, I+1)].

:- backchain length/1.
length([]) = 0.
length([X|Xs]) = 1 + length(Xs).

% declare a sentence.
sentence = split("George love -s Laura .").

%sentence(S, I) =
%  T is b(tree(S)),
%  I in pycall("range", 0, numwords(T)),
%  word(I, T).

zgoal(sentence) max= phrase("ROOT", 0, length(sentence)).
zzgoal(sentence) := path("ROOT", 0, length(sentence)).
