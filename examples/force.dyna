% Try to use the force to lay out a few nodes
%
% run with 
%   ./dyna examples/force.dyna --postprocess src/Dyna/Backend/Python/graph.py
%
% Kamada-Kawai force directed layout
% http://graphael.cs.arizona.edu/papers/graphael_final.pdf

% distance between U and V at time T.
dist(U,V,T) := (x(U,T) - x(V,T))**2 + (y(U,T) - y(V,T))**2
   for true is (T < niter).   % restrict to niter iterations.

% all pairs shortest path.
shortestpath(U,U) min= 0 for node(U).
shortestpath(U,V) min= shortestpath(U,W) + edge(W,V).

% "the unit edge length"
edgelen := 5.0.

f(U,V,T) := true is (U != V), dist(U,V,T) / (shortestpath(U,V) * edgelen) - 1.

forceX(V,T) += f(U,V,T) * (x(U,T) - x(V,T)).
forceY(V,T) += f(U,V,T) * (y(U,T) - y(V,T)).

a := 0.15.
niter := 100.

% should `a` be negative?
x(U,T) += a * forceX(U,T-1).
y(U,T) += a * forceY(U,T-1).

edge("a", "b") := 1.
edge("a", "c") := 1.
edge("a", "d") := 1.
edge("a", "e") := 1.
edge("b", "h") := 1.
edge("b", "i") := 1.
edge("b", "j") := 1.
edge("e", "f") := 1.
edge("e", "g") := 1.
edge("a", "i") := 1.

edge(A,B) := 1 for edge(B,A). % make graph symmetric.

% collect nodes.
node(U) := true for edge(U,_).
node(U) := true for edge(_,U).

% randomly initialize node positions.
x("a",0) += uniform(0,1).  y("a",0) += uniform(0,1).
x("b",0) += uniform(0,1).  y("b",0) += uniform(0,1).
x("c",0) += uniform(0,1).  y("c",0) += uniform(0,1).
x("d",0) += uniform(0,1).  y("d",0) += uniform(0,1).
x("e",0) += uniform(0,1).  y("e",0) += uniform(0,1).
x("f",0) += uniform(0,1).  y("f",0) += uniform(0,1).
x("g",0) += uniform(0,1).  y("g",0) += uniform(0,1).
x("h",0) += uniform(0,1).  y("h",0) += uniform(0,1).
x("i",0) += uniform(0,1).  y("i",0) += uniform(0,1).
x("j",0) += uniform(0,1).  y("j",0) += uniform(0,1).

pos(U,T) := tuple(x(U, T), y(U, T)).

% import pylab aspl
% for U,V,_ in edge:
%     pl.plot([x[U], x[V]],
%             [y[U], y[V]])
