% Single source shortest path with optimal path extraction.

% Cost of the optimal path from start to each node.
path(start) min= 0                   with_key [].
path(B)     min= path(A) + edge(A,B) with_key A.

% The cost of the optimal path to the end node, and that path itself.
goal        = path(end).
optimalpath = reverse(bestpath(end)).

% extract cheapest path by following backpointers from each vertex.
bestpath(V) := [V | bestpath($key(path(V)))].
bestpath(start) := [start].

% expensive path
edge("a","b") := 1.
edge("b","c") := 1.
edge("c","d") := 1.

% cheap path
edge("a","e") := 1.
edge("e","d") := 1.

% define begining and end.
start := "a".
end := "d".


% ---------------------------------------
% list utilities
:- backchain reverse/1.
reverse([]) = [].
reverse([X|Xs]) = append(reverse(Xs), X).

:- backchain append/2.
append([], Y) = [Y].
append([X|Xs], Y) = [X|append(Xs, Y)].
