% Dynamic type checking for Boolean aggregators.

> e :- 10.

Changes
=======
e = $error.

>>> 1 new errors. Type `sol` for details.

> sol

Solution
========
e = $error.

Errors
======
Error(s) aggregating e/0:
  TypeError:
    `e`: 10 is not true.

> retract_rule 0

Changes
=======
e = null.

>>> 1 errors cleared.

> e :- false.

Changes
=======
e = $error.

>>> 1 new errors. Type `sol` for details.

> sol

Solution
========
e = $error.

Errors
======
Error(s) aggregating e/0:
  TypeError:
    `e`: false is not true.


> e :- true.

% didn't clear error because there is still a false aggregand.

> rules

Rules
=====
  1: e :- false.
  2: e :- true.

> retract_rule 1

Changes
=======
e = true.
>>> 1 errors cleared.

> sol

Solution
========
e.             % note the special case printing.


> retract_rule 2

Changes
=======
e = null.


> a |= false.

Changes
=======
a = false.


> a |= true.

Changes
=======
a = true.


> c := "horse".
| b &= c.
| b &= true.

Changes
=======
b = $error.
c = "horse".

>>> 1 new errors. Type `sol` for details.


> sol

Solution
========
a = true.
b = $error.
c = "horse".

Errors
======
Error(s) aggregating b/0:
  TypeError:
    `b`: "horse" is not Boolean.


> c := true.

Changes
=======
b = true.
c = true.

>>> 1 errors cleared.


> f(1,2). f(2,2).

*ignore*

> sol

Solution
========
a = true.
b = true.
c = true.

f/2
===
f(1,2).
f(2,2).


% type checking for `|=`

> foo |= 10.

Changes
=======
foo = $error.
>>> 1 new errors. Type `sol` for details.


> goo &= true.

Changes
=======
goo = true.

> goo &= false.

Changes
=======
goo = false.


> goo &= 10.

Changes
=======
goo = $error.
>>> 1 new errors. Type `sol` for details.
