> :- backchain f/1.
| f(0) := 0.
| f(1) := 1.
| f(X) := f(X-1) + f(X-2) for X > 1.
| a(X) = f(X) for X in range(6).

Changes
=======
a(0) = 0.
a(1) = 1.
a(2) = 1.
a(3) = 2.
a(4) = 3.
a(5) = 5.

% Let's define a few items which will depend on values of `f`

> s += a(X).

Changes
=======
s = 12.


> retract_rule 2

Changes
=======
a(2) = null.
a(3) = null.
a(4) = null.
a(5) = null.
s = 1.


% Note: that `f(0)` and `f(1)` are still defined by rules 0 and 1,
% respectively. We know this because they are not `null`-ed out by retracting
% the rule.

> sol

Solution
========
s = 1.

a/1
===
a(0) = 0.
a(1) = 1.


% Now `f` is factorial

> :- backchain f/1.
| f(X) := f(X-1) * X for X > 1.
| f(0) := 1.
| f(0) := 5.
| b(X) = f(X) for X in range(6).

% Check that `a(x)` and `s`, know that we have a new definition! for `f`, just
% like added a new rule

Changes
=======
a(2) = 2.
a(3) = 6.
a(4) = 24.
a(5) = 120.
b(0) = 0.
b(1) = 1.
b(2) = 2.
b(3) = 6.
b(4) = 24.
b(5) = 120.
s = 153.

> sol

Solution
========
s = 153.

a/1
===
a(0) = 0.
a(1) = 1.
a(2) = 2.
a(3) = 6.
a(4) = 24.
a(5) = 120.

b/1
===
b(0) = 0.
b(1) = 1.
b(2) = 2.
b(3) = 6.
b(4) = 24.
b(5) = 120.
