% in this example we forget to include a base case so we end up recursing
% forever, but thanks to the python runtime this throws an exception and we
% catch it.

> :- backchain f/1.
| f(X) = f(X-1).

% add this rule separately to make sure its an initialization failure
> a = f(3).

Changes
=======
a = $error.

>>> 1 new errors. Type `sol` for details.


> b = a + 1.

>>> 1 new errors. Type `sol` for details.

> rules

Rules
=====
  0: f(X) = f(X-1).
  1: a = f(3).
  2: b = a + 1.  <-- uninitialized

> sol

Solution
========
a = $error.

Errors
======
Error(s) in rule 0: <repl>
    f(X) = f(X-1).
  RuntimeError:
    when `f(-323)` = null
      maximum recursion depth exceeded
      f(X=-323) = f((X=-323 - 1)=-324)=?.

Uninitialized rules
===================
Failed to initialize rule:
    b = a + 1.
  due to `unsupported operand type(s) for +: 'Error' and 'int'`
    b = (a=$error + 1)=?.

> retract_rule 0

Changes
=======
a = null.

>>> 2 errors cleared.

> sol

Solution empty.