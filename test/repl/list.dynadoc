> x = cons(1, 2).

DynaInitializerException:
TypeError('Malformed list',) in ininitializer for rule
    x = cons(1, 2).
new rule(s) were not added to program.


> s set= Y for Y in [3,2,1,[2,1],&f(1)].

Changes
=======
s = [1, 2, 3, [2, 1], f(1)].

> foo = 1 in s.

Changes
=======
foo = true.

% check comparison (sort order) of list and non-list.
> f(s). f(1). f([]).

Changes
=======
f(1) = true.
f([1, 2, 3, [2, 1], f(1)]) = true.
f([]) = true.

% test for empty list
> query 1 in nil

1 in nil = false.

> nothing set= X for X in [].




> g([1,2]).

Changes
=======
g([1, 2]) = true.

> a := [1,2].

Changes
=======
a = [1, 2].

> goal(X) := g([1|X]).

Changes
=======
goal([2]) = true.


% list contains
> b := &f("a") in [1,2,&f("a"),3].
| c := 2 in [1,2,3].
| d := 4 in [1,2,3].

Changes
=======
b = true.
c = true.
d = false.


% iteration of a complex list
> things set= X for X in [1,[2,2],[3,4]].

Changes
=======
things = [1, [2, 2], [3, 4]].

% unpack structure requiring a check
> d(&X) := true for [X,X] in [1,[2,2],[3,4],[4,4]].

Changes
=======
d(2) = true.
d(4) = true.


% let's look at a the difference between Booleans and integers
> bar("int") = 1.
| bar("bool") = true.
| bar("two") = 2.

Changes
=======
bar("bool") = true.
bar("int") = 1.
bar("two") = 2.

% quote is important! or else we enumerate everything!
> foo(A) := true for &bar(A) in [1,2,&bar("a"),3].

Changes
=======
foo("a") = true.

% if you don't quote bar(A) drives the querym checking membership in the list.
> goo(A) := true for bar(A) in [true,2,&bar("a")].

Changes
=======
goo("bool") = true.
goo("two") = true.


% unfortunately 1 == true and 0 == false in python so the following is true
> testbool := true in [1,2].

Changes
=======
testbool = false.


% fun with set= at bag=
> thingsbag bag= "three".
| thingsbag bag= 1.
| thingsbag bag= 1.
| thingsbag bag= 2.
| thingsbag bag= true.            % XREF:bool
|
| thingset set= "three".
| thingset set= 1.
| thingset set= 1.
| thingset set= true.            % XREF:bool should appear separately in set,
| thingset set= 2.

Changes
=======
thingsbag = [1, 1, 2, "three", true].
thingset = [1, 2, true, "three"].
